<%- include('partials/header') %>

<main class="container mt-5">
  <h2 class="mb-4"><%= event.name %></h2>

  <!-- Event Description -->
  <div class="mb-4">
    <h5>Description</h5>
    <p><%= event.description %></p>
  </div>

  <!-- Event Date and Organizer -->
  <div class="mb-4">
    <h5>Date & Organizer</h5>
    <p><strong>Date:</strong> <%= event.date %></p>
    <p><strong>Organizer:</strong> <%= event.organizer %></p>
  </div>

  <!-- Event Location -->
  <div class="mb-4">
    <h5>Location</h5>
    <p><strong>Venue:</strong> <%= event.location.venue %></p>
    <p><strong>City:</strong> <%= event.location.city %></p>
    <p><strong>State:</strong> <%= event.location.state %></p>
    <p><strong>Country:</strong> <%= event.location.country %></p>
  </div>

  <!-- Event Categories -->
  <div class="mb-4">
    <h5>Categories</h5>
    <ul>
      <% event.categories && event.categories.forEach(category => { %>
        <li><%= category %></li>
      <% }) %>
    </ul>
  </div>

  <!-- Event Speakers/Performers/Participants/Leaders/Authors -->
  <div class="mb-4">
    <h5>Featured Individuals</h5>
    <ul>
      <% if (event.speakers) { %>
        <% event.speakers.forEach(speaker => { %>
          <li><strong><%= speaker.name %></strong> - <%= speaker.topic %></li>
        <% }) %>
      <% } else if (event.performers) { %>
        <% event.performers.forEach(performer => { %>
          <li><strong><%= performer.name %></strong> - <%= performer.genre %></li>
        <% }) %>
      <% } else if (event.participants) { %>
        <% event.participants.forEach(participant => { %>
          <li><strong><%= participant.name %></strong> - <%= participant.sector %></li>
        <% }) %>
      <% } else if (event.leaders) { %>
        <% event.leaders.forEach(leader => { %>
          <li><strong><%= leader.name %></strong> - <%= leader.style %></li>
        <% }) %>
      <% } else if (event.authors) { %>
        <% event.authors.forEach(author => { %>
          <li><strong><%= author.name %></strong> - <%= author.genre %></li>
        <% }) %>
      <% } else { %>
        <li>No featured individuals listed</li>
      <% } %>
    </ul>
  </div>

  <!-- Event Sponsors -->
  <div class="mb-4">
    <h5>Sponsors</h5>
    <ul>
      <% if (event.sponsors) { %>
        <% event.sponsors.forEach(sponsor => { %>
          <li><%= sponsor %></li>
        <% }) %>
      <% } else { %>
        <li>No sponsors listed</li>
      <% } %>
    </ul>
  </div>

  <!-- Event Schedule -->
  <div class="mb-4">
    <h5>Schedule</h5>
    <ul>
      <% if (event.schedule) { %>
        <% event.schedule.forEach(item => { %>
          <li><strong><%= item.time %>:</strong> <%= item.activity %></li>
        <% }) %>
      <% } else { %>
        <li>No schedule listed</li>
      <% } %>
    </ul>
  </div>

  <!-- Edit and Delete Buttons -->
  <div class="mt-4">
    <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#editEventModal">Edit Event</button>
    <form action="/api/events/<%= event.id %>?_method=DELETE" method="POST" class="d-inline">
      <button type="submit" class="btn btn-danger">Delete Event</button>
    </form>
  </div>
</main>

<!-- Edit Event Modal -->
<div class="modal fade" id="editEventModal" tabindex="-1" aria-labelledby="editEventModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editEventModalLabel">Edit Event</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editEventForm">
          <!-- Form fields similar to the add event form -->
          <input type="text" class="form-control" name="name" value="<%= event.name %>" required>
          <textarea class="form-control mt-3" name="description" required><%= event.description %></textarea>
          <input type="date" class="form-control mt-3" name="date" value="<%= event.date %>" required>
          <input type="text" class="form-control mt-3" name="organizer" value="<%= event.organizer %>" required>
          <input type="text" class="form-control mt-3" name="venue" value="<%= event.location.venue %>" required>
          <input type="text" class="form-control mt-3" name="city" value="<%= event.location.city %>" required>
          <input type="text" class="form-control mt-3" name="state" value="<%= event.location.state %>" required>
          <input type="text" class="form-control mt-3" name="country" value="<%= event.location.country %>" required>
          <input type="text" class="form-control mt-3" name="categories" value="<%= event.categories ? event.categories.join(', ') : '' %>" required>
          <input type="text" class="form-control mt-3" name="speakers" value="<%= event.speakers ? event.speakers.map(sp => sp.name + ':' + sp.topic).join(', ') : '' %>" required>
          <input type="text" class="form-control mt-3" name="sponsors" value="<%= event.sponsors ? event.sponsors.join(', ') : '' %>" required>
          <input type="text" class="form-control mt-3" name="schedule" value="<%= event.schedule ? event.schedule.map(sch => sch.time + ':' + sch.activity).join(', ') : '' %>" required>
          <button type="submit" class="btn btn-primary mt-3">Save Changes</button>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
 document.getElementById('editEventForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const formData = new FormData(event.target);
    const formProps = Object.fromEntries(formData);

    // Safeguard against undefined or empty fields
    const formattedEvent = {
        ...formProps,
        categories: formProps.categories ? formProps.categories.split(',').map(cat => cat.trim()) : [],
        speakers: formProps.speakers ? formProps.speakers.split(',').map(sp => {
            const [name, topic] = sp.split(':');
            return { name: name?.trim() || '', topic: topic?.trim() || '' };
        }) : [],
        sponsors: formProps.sponsors ? formProps.sponsors.split(',').map(sp => sp.trim()) : [],
        schedule: formProps.schedule ? formProps.schedule.split(',').map(sch => {
            const [time, activity] = sch.split(':');
            return { time: time?.trim() || '', activity: activity?.trim() || '' };
        }) : [],
        location: {
            venue: formProps.venue?.trim() || '',
            city: formProps.city?.trim() || '',
            state: formProps.state?.trim() || '',
            country: formProps.country?.trim() || '',
        }
    };

    try {
        const response = await fetch(`/api/events/<%= event.id %>`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}` // Ensure the token is sent
            },
            body: JSON.stringify(formattedEvent)
        });

        if (response.ok) {
            location.reload(); // Reload the page to reflect the changes
        } else {
            alert('Failed to update the event');
        }
    } catch (error) {
        console.error('Failed to update the event:', error);
    }
});
</script>

<%- include('partials/footer') %>
